/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/CIP7.glb -o src/components/Avatar.jsx -k -r public
*/
'use client'

import { useChatContext } from "@/hooks/useChat";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button as buttonControl, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";


const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export const Avatar = React.forwardRef((props, ref) => {
  const { nodes, materials, scene } = useGLTF(
    "/models/CIP7.glb"
  );

  // Track if the model is fully loaded
  const [isModelLoaded, setIsModelLoaded] = useState(false);

  // Set model as loaded when we have the scene
  useEffect(() => {
    if (scene && Object.keys(nodes).length > 0) {
      // Fix material and geometry issues when model loads
      scene.traverse((child) => {
        if (child.isMesh) {
          // Fix material transparency and rendering issues
          if (child.material) {
            // Ensure materials are opaque and properly rendered
            child.material.transparent = false;
            child.material.alphaTest = 0.1;
            child.material.side = THREE.FrontSide;
            child.material.depthWrite = true;
            child.material.depthTest = true;

            // Fix texture issues
            if (child.material.map) {
              child.material.map.flipY = false;
              child.material.map.generateMipmaps = true;
            }
          }

          // Fix geometry culling and clipping issues
          if (child.geometry) {
            child.geometry.computeBoundingSphere();
            child.geometry.computeBoundingBox();
            child.geometry.computeVertexNormals();
          }

          // Ensure proper rendering order for hair and other elements
          child.renderOrder = 0;
          child.frustumCulled = true;
        }
      });

      setIsModelLoaded(true);
    }
  }, [scene, nodes]);

  // Debug: Log actual node names and structure
  useEffect(() => {
    console.log("=== .glb DEBUG ===");
    console.log("NODES:", Object.keys(nodes));
    console.log("MATERIALS:", Object.keys(materials));
    console.log("SCENE CHILDREN:", scene.children.map(child => child.name));

    // Find all skinned meshes
    const skinnedMeshes = [];
    scene.traverse((child) => {
      if (child.isSkinnedMesh) {
        skinnedMeshes.push({
          name: child.name,
          geometry: child.geometry ? 'exists' : 'missing',
          material: child.material ? 'exists' : 'missing',
          morphTargetDictionary: child.morphTargetDictionary ? Object.keys(child.morphTargetDictionary) : 'none'
        });
      }
    });
    console.log("SKINNED MESHES:", skinnedMeshes);

    // Find all nodes with geometry
    const nodesWithGeometry = [];
    Object.keys(nodes).forEach(nodeName => {
      const node = nodes[nodeName];
      if (node && node.geometry) {
        nodesWithGeometry.push({
          name: nodeName,
          hasGeometry: true,
          hasMaterial: !!node.material,
          hasSkeleton: !!node.skeleton,
          hasMorphTargetDictionary: !!node.morphTargetDictionary
        });
      }
    });
    console.log("NODES WITH GEOMETRY:", nodesWithGeometry);
  }, [nodes, materials, scene]);

  const { lastAvatarMessage, setIsAvatarTalking, onMessagePlayed, chat } = useChatContext();

  const [lipsync, setLipsync] = useState();


  useEffect(() => {
    console.log("Avatar: lastAvatarMessage changed", lastAvatarMessage);
    if (!lastAvatarMessage) {
      setAnimation("Idle");
      return;
    }
    setAnimation(lastAvatarMessage.animation);
    setFacialExpression(lastAvatarMessage.facialExpression);
    setLipsync(lastAvatarMessage.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + lastAvatarMessage.audio);

    // Set avatar talking state immediately when audio starts
    setIsAvatarTalking(true);
    console.log("Avatar: Started talking - setIsAvatarTalking(true)");

    // پخش صدا با مدیریت خطا
    audio.play().catch((error) => {
      console.warn("Audio play failed:", error);
      // اگر پخش صدا شکست خورد، وضعیت آواتار را ریست کن
      setIsAvatarTalking(false);
    });
    setAudio(audio);
    audio.onended = () => {
      console.log("Avatar: Finished talking - calling onMessagePlayed");
      setIsAvatarTalking(false);
      onMessagePlayed(); // این تابع isProcessing را false می‌کند
    };
  }, [lastAvatarMessage]);

  const { animations } = useGLTF("/models/animations-old.glb"); // Use original animations-old.glb

  // Debug: Log animation names
  useEffect(() => {
    console.log("=== animations-old.glb DEBUG ===");
    console.log("ANIMATION CLIPS:", animations.map(a => a.name));
    console.log("ANIMATIONS COUNT:", animations.length);
    console.log("FIRST ANIMATION:", animations[0]);
  }, [animations]);

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  useEffect(() => {
    if (!actions[animation]) return;
    actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => {
      if (actions[animation]) actions[animation].fadeOut(0.5);
    };
  }, [animation]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) { }
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  const hasMorphTargets = React.useMemo(() => {
    // Check for morph targets in any skinned mesh
    let foundMorphTargets = false;
    if (scene) {
      scene.traverse((child) => {
        if (child.isSkinnedMesh && child.morphTargetDictionary && child.morphTargetInfluences) {
          foundMorphTargets = true;
        }
      });
    }
    return foundMorphTargets;
  }, [scene]);

  useEffect(() => {
    try {
      const info = nodes && nodes.Wolf3D_Head && nodes.Wolf3D_Head.morphTargetDictionary;
      console.log("Head morph targets:", info ? info : "none");
    } catch {
      // ignore
    }
  }, [nodes]);

  useFrame(() => {
    if (!hasMorphTargets) {
      return;
    }

    // Apply facial expressions to all skinned meshes with morph targets
    if (!setupMode) {
      scene.traverse((child) => {
        if (child.isSkinnedMesh && child.morphTargetDictionary) {
          Object.keys(child.morphTargetDictionary).forEach((key) => {
            const mapping = facialExpressions[facialExpression];
            if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
              return; // eyes wink/blink are handled separately
            }
            if (mapping && mapping[key]) {
              lerpMorphTarget(key, mapping[key], 0.1);
            } else {
              lerpMorphTarget(key, 0, 0.1);
            }
          });
        }
      });
    }

    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (lastAvatarMessage && lipsync) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.8);
          break;
        }
      }
    }

    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.3);
    });
  });

  useControls("FacialExpressions", {
    chat: buttonControl(() => chat()),
    winkLeft: buttonControl(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: buttonControl(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: buttonControl(() => {
      setupMode = true;
    }),
    disableSetupMode: buttonControl(() => {
      setupMode = false;
    }),
    logMorphTargetValues: buttonControl(() => {
      const emotionValues = {};
      scene.traverse((child) => {
        if (child.isSkinnedMesh && child.morphTargetDictionary) {
          Object.keys(child.morphTargetDictionary).forEach((key) => {
            if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
              return; // eyes wink/blink are handled separately
            }
            const value =
              child.morphTargetInfluences[
              child.morphTargetDictionary[key]
              ];
            if (value > 0.01) {
              emotionValues[key] = value;
            }
          });
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () => {
    if (!hasMorphTargets) {
      return {};
    }

    // Find the first skinned mesh with morph targets for controls
    let morphTargetMesh = null;
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary && !morphTargetMesh) {
        morphTargetMesh = child;
      }
    });

    if (!morphTargetMesh) {
      return {};
    }

    return Object.assign(
      {},
      ...Object.keys(morphTargetMesh.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: morphTargetMesh.morphTargetInfluences[
              morphTargetMesh.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    );
  });

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  // Expose loading state to parent components
  React.useImperativeHandle(ref, () => ({
    isModelLoaded,
    ...group.current
  }));

  return (
    <group {...props} dispose={null} ref={group}>
      {/* Render the entire scene directly to avoid geometry errors */}
      <primitive
        object={scene}
        onUpdate={(self) => {
          // Fix material issues that might cause background problems
          self.traverse((child) => {
            if (child.isMesh) {
              // Ensure proper material settings
              if (child.material) {
                child.material.transparent = false;
                child.material.alphaTest = 0.1;
                child.material.side = THREE.FrontSide;

                // Fix any transparency issues
                if (child.material.map) {
                  child.material.map.flipY = false;
                }
              }

              // Fix geometry culling issues
              if (child.geometry) {
                child.geometry.computeBoundingSphere();
                child.geometry.computeBoundingBox();
              }
            }
          });
        }}
      />
    </group>
  );
});

useGLTF.preload("/models/CIP7.glb");
useGLTF.preload("/models/animations-old.glb"); // Changed back to original animations-old.glb
